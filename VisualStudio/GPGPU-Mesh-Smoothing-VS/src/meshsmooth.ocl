#define INDEX_BITS 26
#define COUNT_BITS 6

kernel void smooth(
	global const float4 * restrict vertex4_array,
	global const unsigned int * restrict adjs_array,
	global float4 * restrict result_vertex4_array,
	unsigned int nels, float factor)
{	
	const unsigned int i = get_global_id(0);
	if(i >= nels) return;
	
	const float4 vertex = vertex4_array[i];
	
	const float lastComponent = vertex.w;
	const unsigned int adjsInfo = as_uint(lastComponent);
	const unsigned int adjsIndexOffset = adjsInfo>>COUNT_BITS;
	const unsigned int adjsCount = (adjsInfo & 0x3f); //0x3f = 0b111111
	
	float4 current_adj, umbrellaOperator = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
	for(int adjIndex=0; adjIndex<adjsCount; adjIndex++)
	{
		current_adj = vertex4_array[adjs_array[adjsIndexOffset+adjIndex]];
		umbrellaOperator += (current_adj - vertex);
	}
	
	umbrellaOperator /= adjsCount;
	float4 res = vertex + factor*umbrellaOperator;
	res.w = lastComponent;
	result_vertex4_array[i] = res;
}

kernel void smooth_lmem(
	global const float4 * restrict vertex4_array,
	local float * restrict local_vertex_array,
	global const unsigned int * restrict adjs_array,
	global float4 * restrict result_vertex4_array,
	unsigned int nels, float factor)
{	
	const unsigned int i = get_global_id(0);	
	if(i >= nels) return;
	
	const unsigned int li = get_local_id(0);
	const unsigned int ls = get_local_size(0);
	const unsigned int gi = get_group_id(0);
	const unsigned int GIxLS = gi*ls;
	
	const float4 vertex = vertex4_array[i];
	//float3 avoid bank conflict in localmemory
	vstore3(vertex.xyz, li, local_vertex_array);

	barrier(CLK_LOCAL_MEM_FENCE);

	const float lastComponent = vertex.w;
	const unsigned int adjsInfo = as_uint(lastComponent);
	const unsigned int adjsIndexOffset = adjsInfo>>COUNT_BITS;
	const unsigned int adjsCount = (adjsInfo & 0x3f); //0x3f = 0b111111
	
	float4 current_adj, umbrellaOperator = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
	float3 tmp_vector;
	unsigned int adj_index;
	int local_Adjindex;
	for(int adjIndex=0; adjIndex<adjsCount; adjIndex++)
	{
		adj_index = adjs_array[adjsIndexOffset+adjIndex];
		local_Adjindex = adj_index - GIxLS;
		
		if(local_Adjindex >= 0 &&  local_Adjindex < ls) {//read from local memory
			tmp_vector = vload3(local_Adjindex, local_vertex_array);
			current_adj = (float4)(tmp_vector.x, tmp_vector.y, tmp_vector.z, 0.0f);
		}
		else {//read from global memory
			current_adj = vertex4_array[adj_index];
		}
		umbrellaOperator += (current_adj - vertex);
	}
	
	umbrellaOperator /= adjsCount;
	float4 res = vertex + factor*umbrellaOperator;
	res.w = lastComponent;
	result_vertex4_array[i] = res;
}

kernel void smooth_lmem_wide(
	global const float4 * restrict vertex4_array,
	local float * restrict local_vertex_array,
	global const unsigned int * restrict adjs_array,
	global float4 * restrict result_vertex4_array,
	unsigned int nels, float factor)
{
	const unsigned int i = get_global_id(0);
	
	const unsigned int li = get_local_id(0);
	const unsigned int ls = get_local_size(0);
	const unsigned int gi = get_group_id(0);
	const unsigned int GIxLS = gi * ls;

	const int tmp = i - ls; // if(i-ls >= 0) doesn't work as it should because uint
	if( tmp >= 0 ) vstore3(vertex4_array[i - ls].xyz, li, local_vertex_array);

	if (i >= nels) return;

	const float4 vertex = vertex4_array[i];
	vstore3(vertex.xyz, (li+ls), local_vertex_array);

	if(i + ls < nels) vstore3(vertex4_array[i + ls].xyz, (li+2*ls), local_vertex_array);

	barrier(CLK_LOCAL_MEM_FENCE);
	
	const float lastComponent = vertex.w;
	const unsigned int adjsInfo = as_uint(lastComponent);
	const unsigned int adjsIndexOffset = adjsInfo >> COUNT_BITS;
	const unsigned int adjsCount = (adjsInfo & 0x3f); //0x3f = 0b111111

	float4 current_adj, umbrellaOperator = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
	float3 tmp_vector;
	unsigned int adj_index;
	int local_Adjindex;
	const int limit = 2 * ls;
	for (int adjIndex = 0; adjIndex<adjsCount; adjIndex++)
	{
		adj_index = adjs_array[adjsIndexOffset + adjIndex];
		local_Adjindex = adj_index - GIxLS;
		
		if (local_Adjindex >= -ls && local_Adjindex < limit) {//read from local memory
			tmp_vector = vload3(local_Adjindex + ls, local_vertex_array);
			current_adj = (float4)(tmp_vector.x, tmp_vector.y, tmp_vector.z, 0.0f);
		}
		else { //read from global memory
			current_adj = vertex4_array[adj_index];
		}
		umbrellaOperator += (current_adj - vertex);
	}

	umbrellaOperator /= adjsCount;
	float4 res = vertex + factor * umbrellaOperator;
	res.w = lastComponent;
	
	result_vertex4_array[i] = res;
}

kernel void smooth_coalescence(
	global const float4 * restrict vertex4_array,
	global const unsigned int * restrict adjs_array,
	global const unsigned int * restrict adjsCounter_array,
	global float4 * restrict result_vertex4_array,
	unsigned int nels, float factor)
{	
	const unsigned int i = get_global_id(0);
	if(i >= nels) return;
	
	const float4 vertex = vertex4_array[i];
	const float lastComponent = vertex.w;
	const unsigned int adjsCount = as_uint(lastComponent);

	float4 current_adj;
	float4 umbrellaOperator = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
	int offset = 0;
	for(int adjIndex=0; adjIndex<adjsCount; adjIndex++)
	{
		current_adj = vertex4_array[adjs_array[i+offset]];
		umbrellaOperator += (current_adj - vertex);
		offset += adjsCounter_array[adjIndex];
	}
	
	umbrellaOperator /= adjsCount; //check adjsCount!=0
	float4 res = vertex + factor*umbrellaOperator;
	res.w = lastComponent;
	result_vertex4_array[i] = res;
}

kernel void smooth_coalescence_lmem(
	global const float4 * restrict vertex4_array,
	global const unsigned int * restrict adjs_array,
	global const unsigned int * restrict adjsCounter_array,
	local unsigned int * restrict local_adjsCounter_array, const unsigned int adjsCounter_array_dim,
	global float4 * restrict result_vertex4_array,
	unsigned int nels, float factor)
{	

	const unsigned int li = get_local_id(0);
	const unsigned int i = get_global_id(0);
	
	if(li<adjsCounter_array_dim) local_adjsCounter_array[li] = adjsCounter_array[li];
	barrier(CLK_LOCAL_MEM_FENCE);
	if(i >= nels) return;
	
	const float4 vertex = vertex4_array[i];
	const float lastComponent = vertex.w;
	const unsigned int adjsCount = as_uint(lastComponent);

	float4 current_adj;
	float4 umbrellaOperator = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
	int offset = 0;
	for(int adjIndex=0; adjIndex<adjsCount; adjIndex++)
	{
		current_adj = vertex4_array[adjs_array[i+offset]];
		umbrellaOperator += (current_adj - vertex);
		offset += local_adjsCounter_array[adjIndex];
	}
	
	umbrellaOperator /= adjsCount; //check adjsCount!=0
	float4 res = vertex + factor*umbrellaOperator;
	res.w = lastComponent;
	result_vertex4_array[i] = res;
}