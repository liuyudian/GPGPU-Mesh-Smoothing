#define INDEX_BITS 26
#define COUNT_BITS 6

kernel void smooth(
	global float4 * restrict vertex4_array,
	global unsigned int* restrict adjs_array,
	global float4 * restrict result_vertex4_array,
	unsigned int nels, float factor)
{	
	unsigned int i = get_global_id(0);
	if(i >= nels) return;
	
	float4 vertex = vertex4_array[i];
	float lastComponent = vertex.w;
	
	unsigned int adjsInfo = *(unsigned int *)&lastComponent;
	unsigned int adjsIndexOffset = adjsInfo>>COUNT_BITS;
	unsigned int adjsCount = ((adjsInfo)<<INDEX_BITS)>>INDEX_BITS;
	
	float4 umbrellaOperator = (float4)(0.0f, 0.0f, 0.0f, 0.0f);
	
	int adjIndex = 0;

	int nload = (int)ceil(adjsCount/4.0f);
	for(int indexLoad=0; indexLoad<nload; indexLoad++) {
		uint4 index4Adjs = *((uint4 *) &adjs_array[adjsIndexOffset+4*indexLoad]);
		printf("\n vertex %d -> %d %d %d %d", i, index4Adjs[0], index4Adjs[1], index4Adjs[2], index4Adjs[3]);
		
		for(int j=0; j<4 && adjIndex<adjsCount; j++, adjIndex++) {
			float4 adj = vertex4_array[index4Adjs[j]];
			umbrellaOperator += ( adj-vertex );
		}
	}
	
	umbrellaOperator /= adjsCount;
	float4 res = vertex + factor*umbrellaOperator;
	res.w = lastComponent;
	result_vertex4_array[i] = res;
}

